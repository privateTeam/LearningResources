<?xml version="1.0" encoding="UTF-8"?>    
<beans xmlns="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:aop="http://www.springframework.org/schema/aop"
             xmlns:tx="http://www.springframework.org/schema/tx"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                     http://www.springframework.org/schema/context
                     http://www.springframework.org/schema/context/spring-context-3.0.xsd
                     http://www.springframework.org/schema/aop
                     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                     http://www.springframework.org/schema/tx
                     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
                     
	<context:annotation-config />
	<context:component-scan base-package="org.beadle" >
		<context:exclude-filter type="regex" expression="org.beadle.controller.*"/>
	</context:component-scan>
	
	<!-- core.properties配置文件 -->
	<bean id="propertyConfigurer"
         class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:config/core.properties</value>
            </list>
        </property>
    </bean>
	
	<!--数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${dataSource.driverClassName}" />
        <property name="url" value="${dataSource.url}" />
        <property name="username" value="${dataSource.username}" />
        <property name="password" value="${dataSource.password}" />
        <property name="filters" value="${dataSource.filters}" />
    </bean>
	
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
       	<property name="configLocation" value="classpath:config/sqlMapConfig.xml" />
       	<property name="dataSource" ref="dataSource" />
	</bean>
	
    <bean id="sqlMapExecutor" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
		<property name="dataSource" ref="dataSource" />
		<property name="sqlMapClient" ref="sqlMapClient" />
	</bean>
    
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    	
	<!--配置哪些方法,什么情况下需要回滚--> 
    <tx:advice id="serviceAdvice" transaction-manager="transactionManager">  
	    <tx:attributes>   
	       <!--当代理的service层中的方法抛出异常的时候才回滚,必须加rollback-for参数--> 
	       <tx:method name="*WithBatch" propagation="REQUIRED" rollback-for="Throwable"/> 
	       <!--除了上面标识的方法,其他方法全是只读方法 
	       <tx:method name="*" read-only="true"/>  -->
	    </tx:attributes>  
    </tx:advice>  
    <!-- 配置哪些类的方法需要进行事务管理 -->  
    <aop:config proxy-target-class="true">  
       <aop:pointcut id="servicePointcut" expression="execution(* org.beadle.service..*.*(..))"/>  
       <aop:advisor pointcut-ref="servicePointcut" advice-ref="serviceAdvice"/>  
    </aop:config>
	
</beans> 